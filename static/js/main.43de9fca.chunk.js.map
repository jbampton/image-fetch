{"version":3,"sources":["components/Image.js","components/GalleryContext.js","components/Gallery.js","components/Forms.js","layout/Footer.js","layout/Header.js","layout/Search.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","useSpring","shadow","opacity","config","mass","tension","friction","className","div","src","Large","alt","Author","Downloads","href","onClick","window","open","GalleryContext","createContext","GalleryProvider","useState","encodeURIComponent","values","setValues","Provider","value","children","axios","require","Gallery","hits","data","setData","useContext","isLoading","setIsLoading","isError","setIsError","URL","uri","useEffect","a","result","fetchData","quantity","totalHits","Spinner","type","color","slice","map","img","key","largeImageURL","user","downloads","Forms","x","state","setState","handleChange","e","target","name","checked","onSubmit","preventDefault","scroll","query","imageType","colors","placeholder","onChange","axis","xstep","xmin","xmax","class","id","for","func","Footer","Header","isOpen","setIsOpen","Button","style","marginBottom","Collapse","Search","App","myRef","useRef","ref","scrollTo","top","current","offsetTop","left","behavior","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43de9fca.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useSpring, animated} from 'react-spring'\r\n\r\n\r\n\r\nexport default function Image(props) {\r\n\r\n    const [prop, set] = useSpring(() => ({ shadow: 0,opacity: 0.9, config: { mass: 1, tension: 170, friction: 26 } }))\r\n\r\n    return (\r\n        <div className=\"col-6 col-sm-3 p-3 text-center\">\r\n            <animated.div className=\"card hover\">\r\n                <img className=\"m-3 img-fluid align-self-center PixImage \" src={props.Large} alt=\"\" /> \r\n                    <div className=\"card-footer\">\r\n                        <small className=\"\">Author: <strong>{props.Author}</strong></small>\r\n                            <p className=\"fa-sm font-weight-light\">Downloads: {props.Downloads}  <button className=\"btn btn-link  m-1\" href={props.Large} onClick={() =>window.open(props.Large,'_blank')}><i className=\"fas fa-file-download\" /></button></p>\r\n                       \r\n                    </div>\r\n            </animated.div>\r\n        </div>\r\n    )\r\n}","import React, {useState, createContext} from 'react'\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nexport const GalleryContext = createContext();\r\n\r\n\r\nexport const GalleryProvider = props => {\r\n    const [values, setValues] = useState(\r\n        {\"query\": \"query\",\r\n        \"quantity\": 12,\r\n        \"imageType\": \"photo\",\r\n        \"colors\": \"\",\r\n        \"uri\": \"https://pixabay.com/api/?key=\"+API_KEY+\"&q=\"+encodeURIComponent(\"query\")\r\n      });\r\n\r\n\r\n\r\n            \r\n      \r\n\r\n      return(\r\n        <GalleryContext.Provider value={[values, setValues]}>\r\n        {props.children}\r\n    </GalleryContext.Provider>\r\n      );\r\n\r\n}","import React, {useState,useEffect,useContext} from 'react'\r\nimport { Spinner } from 'reactstrap';\r\nimport \"./PixImage.css\"\r\nimport Image from \"./Image\"\r\nimport { GalleryContext } from './GalleryContext';\r\nconst axios = require('axios');\r\n\r\nexport default function Gallery(props) {\r\n    //Api data\r\n    const [data, setData] = useState({ hits: [] });\r\n    //Context values\r\n    const [values] = useContext(GalleryContext);\r\n     // Loading / error states\r\n     const [isLoading, setIsLoading] = useState(false);\r\n     const [isError, setIsError] = useState(false);\r\n    \r\n\r\n    \r\n    const URL = values.uri;\r\n    //const URL = \"https://pixabay.com/api/?key=\"+API_KEY+\"&q=\"+encodeURIComponent(props.query)+\"&image_type\"+props.quantity+\"editors_choice=true&colors=\"+props.colors;\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setIsError(false);\r\n            setIsLoading(true);\r\n            try {\r\n          const result = await axios(\r\n            URL,\r\n          );\r\n          setData(result.data);\r\n        }catch(error){\r\n            setIsError(true);\r\n        }\r\n          setIsLoading(false);\r\n        };\r\n        fetchData();\r\n      }, [URL,values.quantity]);\r\n     \r\n     //console.log(data.hits)\r\n    return (\r\n        <div className=\"row p-2\">\r\n            {data.totalHits === 0 && <div className=\"col text-white text-center lead\" > no results...</div>}\r\n            {isError && <div className=\"col text-white text-center lead\">Something went wrong ...</div>}\r\n            {isLoading ? (<div className=\"m-auto fa-5x fa-pulse\"><Spinner type=\"grow\" color=\"success\" /></div>) : ( <>\r\n      {data.hits.slice(0,values.quantity).map(img => (\r\n        \r\n       <Image key={img.largeImageURL} Large={img.largeImageURL} Author={img.user} Downloads={img.downloads}/>\r\n       \r\n      ))}\r\n      </>\r\n    )}  \r\n    \r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React, {useState, useContext} from 'react'\r\nimport { GalleryContext } from './GalleryContext';\r\nimport Slider from 'react-input-slider';\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nexport default function Forms(props) {\r\n\r\nconst [values, setValues] = useContext(GalleryContext);\r\nconst [state, setState] = useState({ x: 12 });\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n   props.scroll();\r\n   const func = () => setValues({...values, uri: \"https://pixabay.com/api/?key=\"+API_KEY+\"&q=\"+encodeURIComponent(values.query)+\"&image_type=\"+values.imageType+\"&colors=\"+values.colors , quantity: state.x});\r\n   func();\r\n  \r\n    \r\n}\r\n\r\nfunction handleChange(e) {\r\n  const {name,value,type,checked} = e.target\r\n   if(type === \"checkbox\"){\r\n    setValues({\r\n      ...values,\r\n       [name]: checked} )\r\n   }else{\r\n     setValues( {...values, [name]: value  })\r\n   }\r\n}\r\n\r\n\r\n\r\nreturn (\r\n        \r\n        <div /* style={{height: \"100vh\"}} */ className=\"row d-flex justify-content-center\">\r\n       \r\n        <form className=\"col-12 col-sm-4\" onSubmit={handleSubmit}>\r\n        \r\n         <input className=\"form-control form-inline  text-center rounded-4 \" name=\"query\" value={props.query} type=\"text\" placeholder=\"search...\" onChange={handleChange} /> <br/><br/> \r\n            <div className=\"\"  >\r\n            <p className=\"\">results: {state.x}</p>\r\n         <Slider axis=\"x\"  name=\"quantity\"\r\n        xstep={2}\r\n        xmin={2}\r\n        xmax={20}\r\n        x={state.x}\r\n        onChange={({ x }) => setState({ x: x })} />\r\n         </div>\r\n          <br/><br/>\r\n\r\n            <label>Color:  <select class=\"custom-select\" name=\"colors\" value={values.colors} onChange={handleChange}>\r\n            <option value=\"\">All</option>\r\n            <option value=\"red\">Red</option>\r\n            <option value=\"green\">Green</option>\r\n            <option value=\"blue\">Blue</option>\r\n          </select> </label> <br />\r\n        \r\n          <br/>  <div className=\"custom-control custom-radio\"><input className=\"custom-control-input\" id=\"customRadio1\" name=\"imageType\" value=\"photo\" type=\"radio\" checked={values.imageType === \"photo\" } onChange={handleChange} /><label class=\"custom-control-label\" for=\"customRadio1\"> Photo </label> </div>\r\n          <br/>  <div className=\"custom-control custom-radio\"><input className=\"custom-control-input\" id=\"customRadio2\" name=\"imageType\" value=\"illustration\" type=\"radio\" checked={values.imageType === \"illustration\" } onChange={handleChange} /><label class=\"custom-control-label\" for=\"customRadio2\"> Illustration </label></div>\r\n          <br/>  <div className=\"custom-control custom-radio\"><input className=\"custom-control-input\" id=\"customRadio3\" name=\"imageType\" value=\"vector\" type=\"radio\" checked={values.imageType === \"vector\" } onChange={handleChange} /><label class=\"custom-control-label\" for=\"customRadio3\"> Vector </label></div>\r\n          <br/>\r\n         \r\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={values.func}>Search</button>\r\n          </form>\r\n         \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div className=\"row mt-2\">\r\n          <div className=\"col text-center text-white mb-2\">\r\n          <hr />\r\n          <footer>\r\n          <small className=\"text-primary\"> &copy; Spectral Apps </small>\r\n          </footer>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{ useState} from 'react'\r\nimport { Collapse, Button} from 'reactstrap';\r\n\r\n\r\n\r\n\r\n\r\nexport default function Header() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n    return (\r\n        <div className=\"row\"> \r\n          <div className=\"col bg-dark text-center text-white\">\r\n            <div className=\"jumbotron bg-dark\">\r\n              <h1 className=\"display-4\">Welcome</h1>\r\n              <p className=\"lead\">Spectral Apps fetch project</p>\r\n              \r\n              <Button color=\"link\" onClick={toggle} style={{ marginBottom: '1rem' }}><i class=\"fas fa-question-circle\"></i></Button>\r\n      <Collapse class=\"collapse row mt-2 px-3\" isOpen={isOpen}>\r\n              <p>Description: Search Photos, Vectors and Illustrations from Pixabay \r\n              <br/>then the App displays the results (Images, Authors, number of downloads) (Download any Image)</p>\r\n              </Collapse>\r\n             \r\n            </div>\r\n            <hr/>\r\n          </div>\r\n          \r\n        </div>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Search(props) {\r\n    return (\r\n        <div className=\"row mt-2\">\r\n        \r\n        <div  id=\"search\" className=\"col bg-dark text-center text-white\">\r\n        \r\n        {props.children}\r\n        <hr />\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useRef} from 'react';\r\nimport Gallery from './components/Gallery';\r\nimport Forms from './components/Forms';\r\nimport Footer from './layout/Footer'\r\nimport Header from './layout/Header'\r\nimport Search from './layout/Search';\r\nimport { GalleryProvider } from './components/GalleryContext';\r\n\r\n\r\nrequire('dotenv').config()\r\n\r\nconst scrollToRef = (ref) => window.scrollTo({\r\n  top:ref.current.offsetTop, \r\n  left: 0,\r\n  behavior: 'smooth'})\r\nfunction App(props) {\r\n  const myRef = useRef(null)\r\n  const executeScroll = () => scrollToRef(myRef)\r\n\r\n \r\n\r\n  return (\r\n    <div className=\"App container-fluid bg-dark\">\r\n        <Header />\r\n        <GalleryProvider>\r\n        <Search>\r\n          <Forms scroll={executeScroll}   />\r\n        </Search>\r\n          \r\n          <div className=\"row\">\r\n            <div ref={myRef} id=\"gallery\" className=\"col bg-dark\">\r\n             \r\n              <Gallery />\r\n             \r\n            </div>\r\n          </div>\r\n          </GalleryProvider>\r\n        <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}